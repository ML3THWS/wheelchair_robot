#ifndef pgmMapJoin_H
#define pgmMapJoin_H

#include "pgmMapCheck.h"
#include <array>
#include <vector>

using std::string;
using std::vector;
using std::array;

/*Class for joining different maps together. This is needed in order to join the 
different updated maps made by the pgmMapCompare class from one day.
FOR EXAMPLE: U let the robot drive to 6 different destinations on one
day, each time (for each autonomous drive to a destination) the robot will generate
a resulting map from the pgmMapCompare class. These maps will all be joined together 
in order to use a RESULTING end map for the day to compare this resulting map
with the pgmMapMerge class and get the final map for the map update!*/
//INFO: In pgm files stored with map_server node the grid values are 254=free, 205=unknown and 0=occupied

class pgmMapJoin
{
	private: 
	//general needed parameters of the class
	vector<vector<uint8_t>> initial_map;				//loaded base/initial map
	vector<vector<uint8_t>> resulting_map;				//variable to store the resulting map
	uint8_t count_maps_to_join;					/*variable to store the count of maps made in one day (drives to a destination in one day) 
									this will be the number of maps to join into one resulting map for the day
									therefore it will be the count of maps to use, to join into one (daily) final map*/
	vector<vector<vector<uint8_t>>> maps_to_join;			/*vector to store all the maps generated by the pgmMapCompare class 
									which should be used to join a resulting finale map for the DAY*/

	//define private functions
	bool check_compatible_map_sizes();				//check if all loaded maps have the same x and y size (otherwise there is an error)
	void join_maps_to_resulting_map_for_the_day();			//join all the made maps from one day into one resulting map
	bool check_count();						//see if at least 2 maps have been passed to the join class (otherwise there would be nothing to merge)

	public:
	//define constructor and destructor
	pgmMapJoin(pgmMapCheck *passed_initial_map, vector<pgmMapCheck> *passed_maps);
	~pgmMapJoin();

	//public functions
	vector<vector<uint8_t>>  join_result_map();
	bool write_new_joined_map(string path_to_new_map_file_loc, string name_of_new_map);
	uint8_t get_count_maps_to_join();
};


#endif