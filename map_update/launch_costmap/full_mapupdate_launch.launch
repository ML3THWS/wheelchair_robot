<launch>
<!--First we start the node which checks if the robots localization is right-->
<node pkg="map_update" type="check_right_localization.py" name="robot_loc_checker">
	<param name="min_localized_amcl_poses_in_row" value="3" />
</node>
<!--Second we start the node which will only let through lidar_scans if the robot (thinks) he is localized-->
<node pkg="map_update" type="lidar_scans_mapupdate.py" name="laser_scans_filter" />

<!--Now all needed params for the mapupdate: First all needed paths/files-->
<param name="base_map_ros_pkg" value="map_update"/> <!--Give/Name the ROS-Package where the initial/base maps you want to use are located-->
<!--REMINDER!: ALL USED MAPS / MAP-FILES HAVE TO ORIGINATE FROM THE SAME MAP!!!-->
<param name="base_map_path" value="/maps/karto_labor_05.pgm"/> <!--Give/Name the full path (including the file name) of the saved occupancy grid map you want to use (HERE THE .pgm FILE IS NEEDED)-->
<param name="base_map_with_edit_path" value="/maps/karto_labor_05_edit.pgm"/>	<!--Give/Name the full path (including the file name) of the saved and edited occupancy grid map you want to use (HERE THE .pgm FILE IS NEEDED)-->
<param name="base_map_yaml_file_path" value="/maps/karto_labor_05.yaml"/> <!--Give/Name the full path (including the file name) of the saved occupancy grid map you want to use (HERE THE .yaml FILE IS NEEDED)-->
<!--Now all needed params for the mapupdate: Second all needed parameters for the mapupdate functionality-->
<param name="changable_grid_cell_deadzone" value="3"/> <!--This parameter sets a so called "deadzone" around occupied cells of the given occupancy grid map. In this deadzone pixels cannot be changed from free to occupied. 
							The changable_grid_cell_deadzone parameter needs to be a positive integer value and tells us how many pixels should not be changable around an occupied cell.-->
<param name="max_maps_used_per_same_day" value="5"/>	<!--This parameter tells us how many resulting so called "compared" maps (originating from the inital/base costmaps) should be generated in one day.
							New compared maps will always be safed when the robot autonomously arrives at a destination, but only if the max_maps_used_per_same_day count has not been
							exceeded.-->
<param name="max_maps_used_per_different_days" value="3"/>	<!--This parameter tells us how many so called "joined" maps (resulting maps from different days) should be used to generated a new updated initial/base map.
								In other words, this parameters describes how many days in a row should be taken into account to search for new or removed parts in the environment. 
								New joined maps will always be safed when the robot autonomously arrives at a destination and a new day has been detected, but only if the max_maps_used_per_different_day count has not been
								exceeded.-->
<param name="removed_objects_safety_distance" value="1"/>	<!--This parameter functions similar to the changable_grid_cell_deadzone parameter, but this time it is used on the costmaps which were generated by the initial map
								without occupied cells (this initial map without occupied cells will be generated by the program itself and is used to search for removed objects). It generates a deadzone 
								around occupied cells in the maps which will be used to search for removed objets. So objects which are still present get "enlarged" and it is not as possible to remove
								parts of objects like walls by mistake resulting from the noise of the used sensor for measuring distances.-->
<param name="overwrite_initial_map" value="false"/>		<!--Define if you want to overwrite the inital map (on the path you gave in the base_map_ros_pkg and base_map_path parameter) with the resulting "new" so called "merged" map after X days (given by the max_maps_used_per_different_days parameter).-->
<param name="use_and_overwrite_initial_edited_map" value="false"/> <!--Define if you want to use and overwrite the inital edited map (on the path you gave in the base_map_ros_pkg and base_map_with_edit_path parameter) with the resulting "new" so called "merged" map after X days (given by the max_maps_used_per_different_days parameter) with the changes you made to the initial map.-->

<!--Lastely we start the program which handles the mapupdate. This program check if the robot is localized
(if robot thinks he is localized correctly) and also checks if we arrived at a destination
so new costmaps can be safed and afterwards processed! (THIS NODE HANDLES THE MAPUPDATE)-->
<node pkg="map_update" type="start_end_check_costmaps.py" name="mapupdate_handler">
</node>

</launch>